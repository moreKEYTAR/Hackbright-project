SETUP NOTES///////////////////////////////////////////////////////////////

Feb-5
Created files: 
model.py, query.py, server.py, README.rst, /templates, /static, /env, requirements.txt, .gitignore, tests.py, notes.txt

Feb-5
Installed:
Flask, flask-sqlalchemy, sqlalchemy, psycopg2, flask debugtoolbar, jinja2



SERVER.PY NOTES///////////////////////////////////////////////////////////////

Feb-5
To visit your Flask app, you can open your browser to http://localhost:5000.
http://127.0.0.1:5000/ ?????

Feb-5
app.run(debug=True) ??????????

    You could disable debug mode by changing this line in server.py:

    app.run(debug=True)
    If you were to set debug to False and visit /greet while there’s an error 
    in that route, the error page you receive would be much less verbose about 
    the problem.

    While you’re developing an app, a vague error page isn’t very helpful. But 
    if your app were deployed online, this output would be much better than giving 
    users access to your debug console!

    When you work on Flask apps at Hackbright, we encourage you to keep the 
    debugger activated to help you effectively track down pesky bugs.

    If you do turn debug mode off, then when you’re ready turn it back on, you 
    will have to restart your server for the change to take effect. That’s because 
    once you turn off debug mode, the server stops automatically updating as you 
    make changes to files.

Feb-13
For later, from Ratings P1:
DateTime
In the u.item file, the dates are given as strings like “31-Oct-2015”. We need to store this in the database as an actual date object, not as a string that just looks like a date. To do this, you’ll need to research the Python datetime library to find the function that can parse a string into a datetime object.
        if released_str:
            released_at = datetime.datetime.strptime(released_str, "%d-%b-%Y")
        else:
            released_at = None

Sequencers
We are adjusting the users_user_id_seq, using the Postgres function setval. You can read more about Postgres functions on sequences here.
>>> # Get a single rating
>>> r = Rating.query.get(1)

>>> # Here's the user_id, which is an actual field in the ratings
>>> # table
>>> print r.user_id
196

>>> # Use our new relationship reference to get the actual User
>>> # object
>>> u = r.user

>>> # We can look at attributes on this
>>> print u.age
49
>>> print u.zipcode
55105

>>> # We can look at the all the ratings made by this user
>>> all_ratings = u.ratings

>>> all_ratings
[<Rating ...>, <Rating ...>, ....]

>>> # These are actual ratings objects, so we can look at their
>>> # attributes
>>> print u.ratings[0].rating_id
1
>>> print u.ratings[0].user_id
196
>>> print u.ratings[0].movie_id
242



TESTS.PY NOTES///////////////////////////////////////////////////////////////

Feb-5
**unittest** supports test automation, sharing of setup and shutdown code for 
tests, aggregation of tests into collections, and independence of the tests 
from the reporting framework. The unittest module provides classes that make 
it easy to support these qualities for a set of tests.


MODEL.PY NOTES///////////////////////////////////////////////////////////////

Feb-5
http://www.vertabelo.com/blog/technical-articles/how-to-store-authentication-data-in-a-database-part-1
http://www.rfc-editor.org/errata_search.php?rfc=3696&eid=1690


 
HTML / CSS design ///////////////////////////////////////////////////////////

Feb-6
home.html

    <h1>Welcome to 
    <h4>Want to join...
    <p>Sign up with...
    <form ...id='enter-site-form'...
    <input type='text' name='email' placeholder='email address' id='email-form-entry'...
    <input type='password' name='pw' placeholder='password' id='pw-form-entry'...
    <div id='submit-input'>
    <input type='submit' id='form-submission'...


javascript & AJAX ///////////////////////////////////////////////////////////

Feb-6: Changed from ajax route for validating/registering, to a normal full route
// $('#enter-site-form').on('submit', function (evt){
//     evt.preventDefault();
//     let email = $('#email-form-entry').val();
//     let payload = {"email": email};

//     $.get('/users/new', payload, function (results){
//         if (results.valid === true){
//             alert("yay! new user!");
//             let pw = $('#pw-form-entry').val();

//             // SO FAR, NO PASSWORD STRENGTH/VALIDATION IS PRESENT; GOES HERE

//             payload["pw"] = pw;  // update the payload 
 
//             $.post('/register', payload, function () {
//                 window.location = '/asjdflkasf'
//             }

//         } else {
//             alert("That email has already been used! Do you need help recovering your password?");
//         }
//     })
// });


Accessibility ///////////////////////////////////////////////////////////////

Feb-6
PENDING

